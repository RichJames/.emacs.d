#+TITLE: emacs custom settings via org and babel
#+PROPERTY: header-args:emacs-lip :tangle ./settings.el

* Set up structure templates
*New*
These provide shortcuts to creating code blocks.  Just type
=<el= and =TAB= and it will expand to a code block for emacs-lisp (in this case).

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
#+end_src
* Auto tangle config file
*New*
We want to re-tangle (i.e. regenerate the settings.el file) each time we save changes to this file.

I am following the guidance in this Youtube video:
[[https://www.youtube.com/watch?v=kkqVTDbfYp4][Emacs From Scratch #7 - Configure Everything with Org Babel]]

I'm not convinved this is working. I can confirm it doesn't work.  I restarted emacs and it still doesn't automatically tangle the file on save.
*TO DO:* Need to investigate this.

#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/init.d/settings.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* UI tweaks and settings
** Olivetti
*New*
Look and feel for long form writing.

#+begin_src emacs-lisp
(use-package olivetti
    :ensure t
    :config
    (setq olivetti-body-width 80)
    (add-hook 'text-mode-hook 'olivetti-mode))
#+end_src

** Additional tweaking to clean up the UI
*** Basic tweaks
*Mostly New*
All of the below are new settings, except for setting *inihibit-startup-message* to *nil*.

#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq initial-major-mode 'org-mode)
(setq-default indent-tabs-mode nil)
(setq pop-up-windows nil)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode nil)
#+end_src

*** Line cursor and no blink
*New*
I'm not sure I am a fan of this; makes it harder to find the cursor,
#+begin_src emacs-lisp
(set-default 'cursor-type '(bar . 1))
(blink-cursor-mode 0)
#+end_src

*** Line spacing
*New*
This can be 0 for code and 1 or 2 for text (spacing is measured in pixels)

#+begin_src emacs-lisp
(setq-default line-spacing 0)
#+end_src

*** Underline line at descent position, not baseline position
*New*
This is a nice modification.  Underlined text looks more professional with this.

#+begin_src emacs-lisp
(setq x-underline-at-descent-line t)
#+end_src

*** Use 2 spaces for auto indent
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 2)
#+end_src

*** Turn on parenthesis highlighting
#+begin_src emacs-lisp
(setq show-paren-delay 0
      show-paren-style 'parenthesis)
(show-paren-mode 1)
#+end_src

*** Set column mode to always be on
#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

*** Frame title display tweaks
Have the emacs window always show the system name and the full path of the buffer being edited.

#+begin_src emacs-lisp
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
	    '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+end_src

* Selection/cursor tweaks
** Expand region
This make for a fast select of a region delimited by balancing symbols.

#+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

** iedit
This enables you to select all the words in a buffer that match the one at the point when you invoke iedit mode.  Then you can edit all those words at the same time. This is intended to replace the native approach of using M-% or C-M-%.  It is recommended that this be bound to C-;. I don't like that suggestion as it replaces C-; as a way to comment/uncomment lines.

#+begin_src emacs-lisp
(use-package iedit
  :ensure t)
#+end_src

** Multiple cursors
See https://github.com/emacsmirror/multiple-cursors for more details.

#+begin_src emacs-lisp
  (use-package multiple-cursors
  :ensure t
  :config
    (when (fboundp 'mc/edit-lines)
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)))
#+end_src

* Which-key mode
Which-key causes emacs to display possible completions after you start an emacs command sequence (e.g. C-c).
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+end_src

* Custom functions
These will be any functions I write to make using emacs easier.

** Define a previous window function and key command
Emacs out-of-the-box provides a way to switch to the next window: =C-x o=.  This is fine when switching between two windows as it acts as a toggle.

However, when three or more windows are open, it starts to become tedious when I want to switch to the previous window quickly.  Instead of hitting =C-x o= repeatedly or doing something like =C-u 2 C-x o=, I create a simple function that can be called with =C-x p= to go the the previous window.

#+begin_src emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))

(define-key global-map (kbd "C-x p") 'prev-window)
#+end_src

* Backups and autosaving
Currently, I have all this commented out.  I was getting errors, so I need to investigate further as to what was going on.

#+begin_src emacs-lisp
;;(setq backup-directory-alist
;;      '(("." . "~/.saves")))
;;(setq auto-save-file-name-transforms
;;      '(("." . "~/.saves")))

;;(message "Deleting old backup files...")
;;(let ((week (* 60 60 24 7))
;;      (current (float-time (current-time))))
;;  (dolist (file (directory-files "~/.saves" t))
;;    (when (and (backup-file-name-p file)
;;	       (> (- current (float-time (cadddr (file-attributes file))))
;;		  week))
;;     (message "%s" file)
;;      (delete-file file))))
#+end_src

* Language settings
** General
Always do syntax highlighting.

#+begin_src emacs-lisp
(global-font-lock-mode 1)
#+end_src

** Javascript
#+begin_src emacs-lisp
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
#+end_src

** Scheme
This is the binary name of my scheme implementation

#+begin_src emacs-lisp
(setq scheme-program-name "mzscheme")
#+end_src

** Slime
*** Basic config
#+begin_src emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
#+end_src

*** Also, enable support for mutliple lisps with slime.
#+begin_src emacs-lisp
(setq slime-lisp-implementations
      '((sbcl ("/usr/bin/sbcl"))
	(clisp ("/usr/bin/clisp"))))

;; Set up global key for slime selector
(global-set-key (kbd "C-c s") 'slime-selector)
#+end_src

** Common Lisp
Default lisp is SBCL.

#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src

** Paredit hooks for language buffers

#+begin_src emacs-lisp
(add-hook 'slime-reply-mode-hook 'enable-paredit-mode)
(add-hook 'lisp-mode-hook 'enable-paredit-mode)
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

* Org Mode
** Clean up UI
#+begin_src emacs-lisp
(add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
(setq org-hide-emphasis-markers t)
(setq org-startup-indented t)
#+end_src

** Clean-up & hide emphasis markers
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

** Org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Keyboard shortcuts
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

#+end_src
* Org-Roam
** Initialize org-roam global minor mode:
#+begin_src emacs-lisp
  (use-package org-roam
      :ensure t
      :config
         (add-hook 'after-init-hook 'org-roam-mode)
      :bind (("C-c n r" . org-roam-buffer-toggle-display)
             ("C-c n i" . org-roam-insert)
             ("C-c n f" . org-roam-find-file)
             ("C-c n b" . org-roam-switch-to-buffer)
             ("C-c n x" . org-roam-jump-to-index)))
#+end_src

** Define key bindings for org-roam
#+begin_src emacs-lisp
  ;;(global-set-key (kbd "C-c n r") #'org-roam-buffer-toggle-display)
  ;;(global-set-key (kbd "C-c n i") #'org-roam-insert)
  ;;(global-set-key (kbd "C-c n f") #'org-roam-find-file)
  ;;(global-set-key (kbd "C-c n b") #'org-roam-switch-to-buffer)
  ;;(global-set-key (kbd "C-c n d") #'org-roam-find-directory)  ;; replaced with binding to Deft (see below)
  ;;(global-set-key (kbd "C-c n x") #'org-roam-find-index)
#+end_src

** Start emacs server
Not sure if this needs to be here or if I could move it elsewhere in the config and not mess up things.  I want the server to be running to enable the use of org-roam protocol so I can graphically navigate my notes.

#+begin_src emacs-lisp
(server-start)
#+end_src_SRC

** Org-roam protocol setup
*** Base configuration
#+begin_src emacs-lisp
  (setq org-roam-graph-executable "/usr/bin/dot")
  (require 'org-roam-protocol)
  (use-package org-roam-server
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8081
          org-roam-server-export-inline-images t
          org-roam-server-authentication nil
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src

*** Firefox and Chrome
#+begin_src emacs-lisp
(add-to-list 'org-capture-templates
               '("P" "Protocol" entry ; key, name, type
                 (file+headline +org-capture-notes-file "Inbox") ; target
                 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?"
                 :prepend t ; properties
                 :kill-buffer t))
                 
(add-to-list 'org-capture-templates
             '("L" "Protocol Link" entry
               (file+headline +org-capture-notes-file "Inbox")
               "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n"
               :prepend t
               :kill-buffer t))
#+end_src

* Org-ref and Org-roam-bibtex
Setup Org-ref and Org-roam-bibtex (ORB) to manage bibliographic notes.
*NOTE:* requires emacs 27.1 or later.

** Org-ref config
*** Turn on tooltip mode in org-ref (set to 0 to turn off)
This was set earlier in the config, so I need to review what was done there and not do this twice.

#+begin_src emacs-lisp
(tooltip-mode 1)
#+end_src

*** Set org-ref variables
#+begin_src emacs-lisp
  (use-package org-ref
   :ensure t
   :config
    (setq
     org-ref-completion-library 'org-ref-ivy-cite
     org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     org-ref-default-bibliography '("~/Bibliography/bibliography.bib")
     org-ref-bibliography-notes "~/org-roam/bibnotes.org"
     org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n :Custom_ID: %k\n :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n :AUTHOR: %9a\n :JOURNAL: %j\n :YEAR: %y\n :VOLUME: %v\n :PAGES: %p\n :DOI: %D\n :URL: %U\n :END:\n\n"
     org-ref-notes-directory "~/org-roam/"
     org-ref-notes-function 'orb-edit-notes))
#+end_src

*** Set up bibliography (Helm-bibtex)
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
  :ensure t
  :config
    (setq
     bibtex-completion-notes-path "~/org-roam/"
     bibtex-completion-bibliography "~/Bibliography/Bibliography.bib"
     bibtex-completion-pdf-field "file"
     bibtex-completion-notes-template-multiple-files
     (concat
      "#+TITLE: ${title}\n"
      "#+ROAM_KEY: cite:${=key=}\n"
      "* TODO Notes\n"
      ":PROPERTIES:\n"
      ":Custom_ID: ${=key=}\n"
      ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
      ":AUTHOR: ${author-abbrev}\n"
      ":JOURNAL: ${journaltitle}\n"
      ":DATE: ${date}\n"
      ":YEAR: ${year}\n"
      ":DOI: ${doi}\n"
      ":URL: ${url}\n"
      ":END:\n\n")))
#+end_src
  
*** Completion framework
We are using helm as the completion framework for the below keybinding.  If we decide to use ivy later on, just bind it to org-ref-ivy-cite-completion.

#+begin_src emacs-lisp
(global-set-key (kbd "<f6>") #'org-ref-helm-insert-cite-link)
#+end_src

** Org-roam bibtex
I'm a little confused about how I've separated some of the bibtex config here.  In the previous section I ensured org-roam-bibtex was installed.  Seems like I should combine what I did there with what I am doing here.

#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'org-roam-bibtex-mode)
  (setq org-roam-bibtex-preformat-keywords
        '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

  - tags ::
  - keywords :: ${keywords}

  \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

             :unnarrowed t)))

  (define-key org-roam-bibtex-mode-map (kbd "C-c n a") #'orb-note-actions)

  ;; Not sure the below are needed
  ;; (setq org-ref-bibliography-notes "~/org-roam/notes.org")
  ;; (setq bibtex-completion-notes-path "~/org-roam/notes.org")
#+end_src

* Org-Noter
I don't know if I'll ever need this.  It provides a way to attach notes to a PDF file as you read it.

#+begin_src emacs-lisp
  (use-package org-noter
  :ensure t
  :config 
    (setq
     org-noter-notes-window-location 'other-frame
     org-noter-always-create-frame nil
     org-noter-hide-other nil
     org-noter-notes-search-path "~/org-roam/"))
#+end_src

* Ivy, Counsel & Swiper

#+begin_src emacs-lisp
(use-package counsel
  :ensure t)
(use-package swiper
  :ensure t
  :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    )

;; Enable Ivy to allow creation of files with names that partially match existing files
(setq ivy-use-selectable-prompt t)
#+end_src

* Deft
#+begin_src emacs-lisp
(use-package deft
  :after org
  :bind ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/org-roam/")
  (deft-file-naming-rules
    '((noslash . "-")
      (nospace . "-")
      (case-fn . downcase))))
#+end_src


